version: '3.8'

services:
# Listener Service
  listener:
    build: ./listener
    depends_on:
      - api
    networks:
      - app-network
    restart: always
    env_file:
      - ./.env

# Main Backend
  api:
    build: ./api
    ports:
      - "3000:3000"
    environment:
      - DATABASE_URL=postgres://postgres:password@db:5432/mydatabase
    depends_on:
      - db
    networks:
      - app-network
    restart: always
    env_file:
      - ./.env
    volumes:
      - ./api:/app
      - /app/node_modules

# Database Service
  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: mydatabase
    volumes:
      - db_data:/var/lib/postgresql/data
    networks:
      - app-network
    restart: always


# Redis Broker Service
  redis-broker:
    # https://redis.com/solutions/use-cases/messaging/
    image: redis:7
    volumes:
      - ./workers-backend/redis/redis.conf:/usr/local/etc/redis/redis.conf
    networks:
      - app-network

# Workers Backend Service (Producer)
  producer:
    build:
        context: ./workers-backend/project
        dockerfile: Dockerfile
    command: uvicorn producer:app --reload --host 0.0.0.0 --port 8000
    volumes:
      - ./workers-backend/project:/opt/
    expose:
      - 8000
    ports:
      - '8000:8000'
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}

    depends_on:
      - redis-broker
    
    networks:
      - app-network

# Consumer Service
  consumer:
    build:
      context: ./workers-backend/project
      dockerfile: Dockerfile
    deploy:
      # replicas scales containers
      replicas: 2
    # concurrency specifies number of worker
    # purge deletes the broker queue every time it starts up
    command: celery -A consumer.celery_app worker --loglevel=INFO --purge --concurrency=1
    volumes:
      - ./workers-backend/project:/opt/
    depends_on:
      - producer
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    networks:
      - app-network
  
# Dashboard Service
  dashboard:
    build:
      context: ./workers-backend/project
      dockerfile: Dockerfile
    command: bash -c "sleep 10; celery -A consumer.celery_app flower --loglevel=INFO --url_prefix=dashboard;"
    expose:
      - 5555
    ports:
      - '5555:5555'
    volumes:
      - ./workers-backend/project:/opt/
    depends_on:
      - consumer
      # - celery_beat
    environment:
      CELERY_BROKER_URL: ${CELERY_BROKER_URL}
      CELERY_RESULT_BACKEND: ${CELERY_RESULT_BACKEND}
    
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  db_data:
